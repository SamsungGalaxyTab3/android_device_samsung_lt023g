diff --git a/include/hardware_legacy/driver_nl80211.h b/include/hardware_legacy/driver_nl80211.h
new file mode 100644
index 0000000..40c941a
--- /dev/null
+++ b/include/hardware_legacy/driver_nl80211.h
@@ -0,0 +1,216 @@
+/*
+ * Driver interaction with Linux nl80211/cfg80211
+ * Copyright (c) 2002-2014, Jouni Malinen <j@w1.fi>
+ * Copyright (c) 2003-2004, Instant802 Networks, Inc.
+ * Copyright (c) 2005-2006, Devicescape Software, Inc.
+ * Copyright (c) 2007, Johannes Berg <johannes@sipsolutions.net>
+ * Copyright (c) 2009-2010, Atheros Communications
+ *
+ * This software may be distributed under the terms of the BSD license.
+ * See README for more details.
+ */
+
+#ifndef _DRIVER_NL80211_H_
+#define _DRIVER_NL80211_H_
+
+#include "includes.h"
+#include <sys/ioctl.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <net/if.h>
+#include <netlink/genl/genl.h>
+#include <netlink/genl/family.h>
+#include <netlink/genl/ctrl.h>
+#include <linux/rtnetlink.h>
+#include <netpacket/packet.h>
+#include <linux/filter.h>
+#include <linux/errqueue.h>
+#include "nl80211_copy.h"
+
+#include "common.h"
+#include "eloop.h"
+#include "utils/list.h"
+#include "common/qca-vendor.h"
+#include "common/qca-vendor-attr.h"
+#include "common/ieee802_11_defs.h"
+#include "common/ieee802_11_common.h"
+#include "l2_packet/l2_packet.h"
+#include "netlink.h"
+#include "linux_ioctl.h"
+#include "radiotap.h"
+#include "radiotap_iter.h"
+#include "rfkill.h"
+#include "driver.h"
+
+#ifdef CONFIG_LIBNL20
+/* libnl 2.0 compatibility code */
+#define nl_handle nl_sock
+#define nl80211_handle_alloc nl_socket_alloc_cb
+#define nl80211_handle_destroy nl_socket_free
+#endif /* CONFIG_LIBNL20 */
+
+#ifndef IFF_LOWER_UP
+#define IFF_LOWER_UP   0x10000         /* driver signals L1 up         */
+#endif
+#ifndef IFF_DORMANT
+#define IFF_DORMANT    0x20000         /* driver signals dormant       */
+#endif
+
+#ifndef IF_OPER_DORMANT
+#define IF_OPER_DORMANT 5
+#endif
+#ifndef IF_OPER_UP
+#define IF_OPER_UP 6
+#endif
+
+struct nl80211_global {
+	struct dl_list interfaces;
+	int if_add_ifindex;
+	u64 if_add_wdevid;
+	int if_add_wdevid_set;
+	struct netlink_data *netlink;
+	struct nl_cb *nl_cb;
+	struct nl_handle *nl;
+	int nl80211_id;
+	int ioctl_sock; /* socket for ioctl() use */
+
+	struct nl_handle *nl_event;
+};
+
+struct nl80211_wiphy_data {
+	struct dl_list list;
+	struct dl_list bsss;
+	struct dl_list drvs;
+
+	struct nl_handle *nl_beacons;
+	struct nl_cb *nl_cb;
+
+	int wiphy_idx;
+};
+
+struct i802_bss {
+	struct wpa_driver_nl80211_data *drv;
+	struct i802_bss *next;
+	int ifindex;
+	u64 wdev_id;
+	char ifname[IFNAMSIZ + 1];
+	char brname[IFNAMSIZ];
+	unsigned int beacon_set:1;
+	unsigned int added_if_into_bridge:1;
+	unsigned int added_bridge:1;
+	unsigned int in_deinit:1;
+	unsigned int wdev_id_set:1;
+	unsigned int added_if:1;
+	unsigned int static_ap:1;
+
+	u8 addr[ETH_ALEN];
+
+	int freq;
+	int bandwidth;
+	int if_dynamic;
+
+	void *ctx;
+	struct nl_handle *nl_preq, *nl_mgmt;
+	struct nl_cb *nl_cb;
+
+	struct nl80211_wiphy_data *wiphy_data;
+	struct dl_list wiphy_list;
+};
+
+struct wpa_driver_nl80211_data {
+	struct nl80211_global *global;
+	struct dl_list list;
+	struct dl_list wiphy_list;
+	char phyname[32];
+	void *ctx;
+	int ifindex;
+	int if_removed;
+	int if_disabled;
+	int ignore_if_down_event;
+	struct rfkill_data *rfkill;
+	struct wpa_driver_capa capa;
+	u8 *extended_capa, *extended_capa_mask;
+	unsigned int extended_capa_len;
+	int has_capability;
+
+	int operstate;
+
+	int scan_complete_events;
+	enum scan_states {
+		NO_SCAN, SCAN_REQUESTED, SCAN_STARTED, SCAN_COMPLETED,
+		SCAN_ABORTED, SCHED_SCAN_STARTED, SCHED_SCAN_STOPPED,
+		SCHED_SCAN_RESULTS
+	} scan_state;
+
+	struct nl_cb *nl_cb;
+
+	u8 auth_bssid[ETH_ALEN];
+	u8 auth_attempt_bssid[ETH_ALEN];
+	u8 bssid[ETH_ALEN];
+	u8 prev_bssid[ETH_ALEN];
+	int associated;
+	u8 ssid[32];
+	size_t ssid_len;
+	enum nl80211_iftype nlmode;
+	enum nl80211_iftype ap_scan_as_station;
+	unsigned int assoc_freq;
+
+	int monitor_sock;
+	int monitor_ifidx;
+	int monitor_refcount;
+
+	unsigned int disabled_11b_rates:1;
+	unsigned int pending_remain_on_chan:1;
+	unsigned int in_interface_list:1;
+	unsigned int device_ap_sme:1;
+	unsigned int poll_command_supported:1;
+	unsigned int data_tx_status:1;
+	unsigned int scan_for_auth:1;
+	unsigned int retry_auth:1;
+	unsigned int use_monitor:1;
+	unsigned int ignore_next_local_disconnect:1;
+	unsigned int ignore_next_local_deauth:1;
+	unsigned int allow_p2p_device:1;
+	unsigned int hostapd:1;
+	unsigned int start_mode_ap:1;
+	unsigned int start_iface_up:1;
+	unsigned int test_use_roc_tx:1;
+	unsigned int ignore_deauth_event:1;
+	unsigned int dfs_vendor_cmd_avail:1;
+	unsigned int have_low_prio_scan:1;
+
+	u64 remain_on_chan_cookie;
+	u64 send_action_cookie;
+
+	unsigned int last_mgmt_freq;
+
+	struct wpa_driver_scan_filter *filter_ssids;
+	size_t num_filter_ssids;
+
+	struct i802_bss *first_bss;
+
+	int eapol_tx_sock;
+
+	int eapol_sock; /* socket for EAPOL frames */
+
+	int default_if_indices[16];
+	int *if_indices;
+	int num_if_indices;
+
+	/* From failed authentication command */
+	int auth_freq;
+	u8 auth_bssid_[ETH_ALEN];
+	u8 auth_ssid[32];
+	size_t auth_ssid_len;
+	int auth_alg;
+	u8 *auth_ie;
+	size_t auth_ie_len;
+	u8 auth_wep_key[4][16];
+	size_t auth_wep_key_len[4];
+	int auth_wep_tx_keyidx;
+	int auth_local_state_change;
+	int auth_p2p;
+};
+
+#endif
diff --git a/wifi/Android.mk b/wifi/Android.mk
index 7610a9e..2a62497 100644
--- a/wifi/Android.mk
+++ b/wifi/Android.mk
@@ -15,6 +15,9 @@ endif
 ifdef WIFI_FIRMWARE_LOADER
 LOCAL_CFLAGS += -DWIFI_FIRMWARE_LOADER=\"$(WIFI_FIRMWARE_LOADER)\"
 endif
+ifdef WIFI_DRIVER_LOADER_DELAY
+LOCAL_CFLAGS += -DWIFI_DRIVER_LOADER_DELAY=$(WIFI_DRIVER_LOADER_DELAY)
+endif
 ifdef WIFI_DRIVER_FW_PATH_STA
 LOCAL_CFLAGS += -DWIFI_DRIVER_FW_PATH_STA=\"$(WIFI_DRIVER_FW_PATH_STA)\"
 endif
@@ -69,4 +72,10 @@ LOCAL_CFLAGS += -DSAMSUNG_WIFI
 LOCAL_C_INCLUDES += hardware/samsung/macloader/include
 endif
 
+ifeq ($(BOARD_HAVE_MARVELL_WIFI),true)
+LOCAL_CFLAGS += -DMRVL_WIFI
+LOCAL_C_INCLUDES += hardware/marvell/wlan/mrvl/libMarvellWireless
+LOCAL_SHARED_LIBRARIES += libMarvellWireless
+endif
+
 LOCAL_SHARED_LIBRARIES += libnetutils
diff --git a/wifi/wifi.c b/wifi/wifi.c
index e9a2958..55aff3d 100644
--- a/wifi/wifi.c
+++ b/wifi/wifi.c
@@ -59,6 +59,19 @@
 #include <samsung_macloader.h>
 #endif
 
+/* socket pair used to exit from a blocking read */
+static int Dbg = 0;
+
+#ifdef MRVL_WIFI
+/*  firmware state:
+  * 0: normal;
+  * 1: hang
+*/
+#define FW_STATE_NORMAL 0
+#define FW_STATE_HUNG   1
+static int fw_state;
+#endif
+
 extern int do_dhcp();
 extern int ifc_init();
 extern void ifc_close();
@@ -175,6 +188,7 @@ static unsigned char dummy_key[21] = { 0x02, 0x11, 0xbe, 0x33, 0x43, 0x35,
 static char supplicant_name[PROPERTY_VALUE_MAX];
 /* Is either SUPP_PROP_NAME or P2P_PROP_NAME */
 static char supplicant_prop_name[PROPERTY_KEY_MAX];
+static char service_dynamic_args[PROPERTY_VALUE_MAX];
 
 #ifdef SAMSUNG_WIFI
 char* get_samsung_wifi_type()
@@ -347,8 +361,48 @@ int is_wifi_driver_loaded() {
 #endif
 }
 
+#ifdef MRVL_WIFI
+#define MAX_RETRY 2
 int wifi_load_driver()
 {
+    int ret = 0;
+    int retry = MAX_RETRY;
+    while (retry-- > 0) {
+        ret = wifi_enable();
+        ALOGD("wifi_enable, ret: 0x%x", ret);
+        if (!ret) break;
+
+        /* wifi_enable failed, assume FW has hung */
+        ALOGD("Fail to enable WIFI the [%d] time, force power off", MAX_RETRY - retry);
+        if (wifi_uap_force_poweroff())break;
+    }
+    if (ret) {
+        wifi_disable();
+    }
+    return ret;
+}
+
+int wifi_unload_driver()
+{
+    int ret = 0;
+    int i = 0;
+    ret = wifi_disable();
+    ALOGD("wifi_disable, ret: 0x%x", ret);
+
+    if (ret) {
+        /* Sometimes, driver has not detected the FW hung yet (driver need 9s to get this);  */
+        /* and so MarvellWirelessDaemon did not call wifi_uap_force_poweroff to recover the chip, */
+        /* which will lead to failure of wifi_disable. Then we need to do it here */
+        ALOGD("Fail to disable WIFI, force power off");
+        if (!wifi_uap_force_poweroff())ret = 0;
+    }
+    return ret;
+}
+#else
+
+int wifi_load_driver()
+{
+
     char driver_status[PROPERTY_VALUE_MAX];
     int count = 100; /* wait at most 20 seconds for completion */
 #ifdef WIFI_DRIVER_MODULE_PATH
@@ -456,6 +510,7 @@ int wifi_unload_driver()
     return 0;
 #endif
 }
+#endif
 
 int ensure_entropy_file_exists()
 {
@@ -784,6 +839,7 @@ int wifi_start_supplicant(int p2p_supported)
 {
     char supp_status[PROPERTY_VALUE_MAX] = {'\0'};
     int count = 200; /* wait at most 20 seconds for completion */
+		char start_cmd[PROPERTY_VALUE_MAX] = {'\0'};
     const prop_info *pi;
     unsigned serial = 0, i;
 
@@ -791,6 +847,15 @@ int wifi_start_supplicant(int p2p_supported)
         return -1;
     }
 
+#ifdef MRVL_WIFI
+    fw_state = FW_STATE_NORMAL;
+    if (wifi_get_fwstate()) {
+        if ((0 != wifi_unload_driver()) ||
+            (0 != wifi_load_driver())){
+            return -1;
+        }
+    }
+#endif
     if (p2p_supported) {
         strcpy(supplicant_name, P2P_SUPPLICANT_NAME);
         strcpy(supplicant_prop_name, P2P_PROP_NAME);
@@ -849,6 +914,18 @@ int wifi_start_supplicant(int p2p_supported)
     property_get("wifi.interface", primary_iface, WIFI_TEST_INTERFACE);
 
     property_set("ctl.start", supplicant_name);
+    /* The total length should shorter than [PROPERTY_VALUE_MAX - 1 - strlen(":-") ]*/
+    if ((strlen(service_dynamic_args) + strlen(supplicant_name)) >= (PROPERTY_VALUE_MAX - strlen(":-"))) {
+        ALOGE("Failed to set dynamical argument for supplicant: the argument[%s] is too long!", service_dynamic_args);
+        memset(service_dynamic_args, 0, sizeof(service_dynamic_args));
+    }
+
+    if (strlen(service_dynamic_args) == 0) {
+        strcpy(start_cmd, supplicant_name);
+    } else {
+        snprintf(start_cmd, sizeof(start_cmd), "%s:-%s", supplicant_name, service_dynamic_args);
+    }
+
     sched_yield();
 
     while (count-- > 0) {
@@ -970,9 +1047,84 @@ int wifi_connect_to_supplicant()
     return wifi_connect_on_socket_path(path);
 }
 
+#define UTF8_2_BYTE_SIZE_MASK 0xE0
+#define UTF8_2_BYTE_HEADER 0xC0
+#define UTF8_3_BYTE_SIZE_MASK 0xF0
+#define UTF8_3_BYTE_HEADER 0xE0
+#define UTF8_SBU_MASK 0xC0
+#define UTF8_SBU_HEADER 0x80
+
+static int has_no_utf8_char(char *buf, int len)
+{
+    char *p = buf;
+
+        while (p - buf < len) {
+        if (p[0] & 0x80) {
+            if ((p[0] & UTF8_2_BYTE_SIZE_MASK) == UTF8_2_BYTE_HEADER) {
+                if ((p[1] & UTF8_SBU_MASK) == UTF8_SBU_HEADER) {
+                    p += 2;
+                } else {
+                    return 1;
+                }
+            } else if ((p[0] & UTF8_3_BYTE_SIZE_MASK) == UTF8_3_BYTE_HEADER) {
+                if (((p[1] & UTF8_SBU_MASK) == UTF8_SBU_HEADER) && ((p[2] & UTF8_SBU_MASK) == UTF8_SBU_HEADER)) {
+                    p += 3;
+                } else {
+                    return 1;
+                }
+            } else {
+                return 1;
+            }
+        } else {
+            p++;
+        }
+    }
+    return 0;
+}
+
+static void filter_no_utf8_ssid(char *reply, size_t *reply_len)
+{
+    char *reply_begin, *reply_end, *ap_begin, *ap_end;
+    char *p1, *p2;
+    int aps = 0, ap_info_len;
+
+    reply_begin = reply;
+    reply_end = reply + *reply_len;
+
+    for (ap_begin = reply, ap_end = reply; ap_end <= reply_end; ap_end++) {
+        if (ap_end == reply_end || *ap_end == '\n') {
+            aps++;
+            if (aps == 1) {
+                ap_begin = ap_end + 1;
+                continue;
+            }
+            if (ap_end > ap_begin) {
+                ap_info_len = ap_end - ap_begin;
+                if (has_no_utf8_char(ap_begin, ap_info_len)) {
+                    /* discard the no utf8 ssid ap */
+                    for (p1 = ap_begin, p2 = ap_end + 1; p2 <= reply_end; p1++, p2++) {
+                       *p1 = *p2;
+                    }
+                    reply_end -= ap_info_len;
+                    *reply_len = *reply_len - ap_info_len;
+                    ap_end = ap_begin;
+                } else {
+                    ap_begin = ap_end + 1;
+                }
+            }
+        }
+    }
+}
+
 int wifi_send_command(const char *cmd, char *reply, size_t *reply_len)
 {
     int ret;
+#ifdef MRVL_WIFI
+    if (fw_state == FW_STATE_HUNG) {
+        ALOGD("WiFi firmware hang: Skip command '%s'\n", cmd);
+        return -2;
+    }
+#endif
     if (ctrl_conn == NULL) {
         ALOGV("Not connected to wpa_supplicant - \"%s\" command dropped.\n", cmd);
         return -1;
@@ -980,15 +1132,33 @@ int wifi_send_command(const char *cmd, char *reply, size_t *reply_len)
     ret = wpa_ctrl_request(ctrl_conn, cmd, strlen(cmd), reply, reply_len, NULL);
     if (ret == -2) {
         ALOGD("'%s' command timed out.\n", cmd);
+#ifdef MRVL_WIFI
+        fw_state = wifi_get_fwstate();
+        if (fw_state == FW_STATE_HUNG) {
+            wifi_uap_force_poweroff();
+        }
+#endif
+        /* unblocks the monitor receive socket for termination */
+        TEMP_FAILURE_RETRY(write(exit_sockets[0], "T", 1));
+        return -2;
+    } else if (ret < 0) {
+        ALOGD("Fail to implement command '%s'.\n", cmd);
         /* unblocks the monitor receive socket for termination */
         TEMP_FAILURE_RETRY(write(exit_sockets[0], "T", 1));
         return -2;
-    } else if (ret < 0 || strncmp(reply, "FAIL", 4) == 0) {
+    } else if (strncmp(reply, "FAIL", 4) == 0) {
         return -1;
     }
     if (strncmp(cmd, "PING", 4) == 0) {
         reply[*reply_len] = '\0';
     }
+    if (Dbg)
+    {
+        ALOGD("wifi_send command: send [%s] to wpa_supplicant successfully!", cmd);
+    }
+    if (strncmp(cmd, "SCAN_RESULTS", 12) == 0) {
+        filter_no_utf8_ssid(reply, reply_len);
+    }
     return 0;
 }
 
@@ -1075,9 +1245,9 @@ int wifi_wait_on_socket(char *buf, size_t buflen)
     /*
      * Events strings are in the format
      *
-     *     IFNAME=iface <N>CTRL-EVENT-XXX 
+     *     IFNAME=iface <N>CTRL-EVENT-XXX
      *        or
-     *     <N>CTRL-EVENT-XXX 
+     *     <N>CTRL-EVENT-XXX
      *
      * where N is the message level in numerical form (0=VERBOSE, 1=DEBUG,
      * etc.) and XXX is the event name. The level information is not useful
@@ -1200,3 +1370,32 @@ int wifi_set_mode(int mode) {
     wifi_mode = mode;
     return 0;
 }
+
+/* Set Marvell HAL Debug Log */
+void setDbg(int dbgLevel)
+{
+    Dbg = (int)(dbgLevel <= 2 ? 1:0);
+}
+
+/* Return 0 if succeed, < 0 if failed. */
+int bt_set_drvarg(const char * bt_drv_arg) {
+    return 0;
+}
+
+/* Return 0 if succeed, < 0 if failed. */
+int wifi_set_drvarg(const char * wifi_drv_arg){
+    return 0;
+}
+
+/* Set supplicant Debug Log */
+int wifi_set_svc_args(const char * svc_args)
+{
+    if (strlen(svc_args) >= PROPERTY_VALUE_MAX) {
+        ALOGE("The supplicant arg[%s] is too long( >= %d )!", svc_args, PROPERTY_VALUE_MAX);
+        return -1;
+    }
+    memset(service_dynamic_args, 0, PROPERTY_VALUE_MAX);
+    strcpy(service_dynamic_args, svc_args);
+
+    return 0;
+}
